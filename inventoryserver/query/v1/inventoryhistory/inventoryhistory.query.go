// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package inventoryhistory

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"github.com/hinss/api/inventoryserver/model/v1/inventoryhistory"
	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newInventoryHistory(db *gorm.DB) inventoryHistory {
	_inventoryHistory := inventoryHistory{}

	_inventoryHistory.inventoryHistoryDo.UseDB(db)
	_inventoryHistory.inventoryHistoryDo.UseModel(&inventoryhistory.InventoryHistory{})

	tableName := _inventoryHistory.inventoryHistoryDo.TableName()
	_inventoryHistory.ALL = field.NewField(tableName, "*")
	_inventoryHistory.ID = field.NewInt32(tableName, "id")
	_inventoryHistory.AddTime = field.NewTime(tableName, "add_time")
	_inventoryHistory.IsDeleted = field.NewBool(tableName, "is_deleted")
	_inventoryHistory.UpdateTime = field.NewTime(tableName, "update_time")
	_inventoryHistory.OrderSn = field.NewString(tableName, "order_sn")
	_inventoryHistory.OrderInvDetail = field.NewString(tableName, "order_inv_detail")
	_inventoryHistory.Status = field.NewInt32(tableName, "status")

	_inventoryHistory.fillFieldMap()

	return _inventoryHistory
}

type inventoryHistory struct {
	inventoryHistoryDo inventoryHistoryDo

	ALL            field.Field
	ID             field.Int32
	AddTime        field.Time
	IsDeleted      field.Bool
	UpdateTime     field.Time
	OrderSn        field.String
	OrderInvDetail field.String
	Status         field.Int32

	fieldMap map[string]field.Expr
}

func (i inventoryHistory) Table(newTableName string) *inventoryHistory {
	i.inventoryHistoryDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i inventoryHistory) As(alias string) *inventoryHistory {
	i.inventoryHistoryDo.DO = *(i.inventoryHistoryDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *inventoryHistory) updateTableName(table string) *inventoryHistory {
	i.ALL = field.NewField(table, "*")
	i.ID = field.NewInt32(table, "id")
	i.AddTime = field.NewTime(table, "add_time")
	i.IsDeleted = field.NewBool(table, "is_deleted")
	i.UpdateTime = field.NewTime(table, "update_time")
	i.OrderSn = field.NewString(table, "order_sn")
	i.OrderInvDetail = field.NewString(table, "order_inv_detail")
	i.Status = field.NewInt32(table, "status")

	i.fillFieldMap()

	return i
}

func (i *inventoryHistory) WithContext(ctx context.Context) *inventoryHistoryDo {
	return i.inventoryHistoryDo.WithContext(ctx)
}

func (i inventoryHistory) TableName() string { return i.inventoryHistoryDo.TableName() }

func (i inventoryHistory) Alias() string { return i.inventoryHistoryDo.Alias() }

func (i *inventoryHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *inventoryHistory) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 7)
	i.fieldMap["id"] = i.ID
	i.fieldMap["add_time"] = i.AddTime
	i.fieldMap["is_deleted"] = i.IsDeleted
	i.fieldMap["update_time"] = i.UpdateTime
	i.fieldMap["order_sn"] = i.OrderSn
	i.fieldMap["order_inv_detail"] = i.OrderInvDetail
	i.fieldMap["status"] = i.Status
}

func (i inventoryHistory) clone(db *gorm.DB) inventoryHistory {
	i.inventoryHistoryDo.ReplaceDB(db)
	return i
}

type inventoryHistoryDo struct{ gen.DO }

func (i inventoryHistoryDo) Debug() *inventoryHistoryDo {
	return i.withDO(i.DO.Debug())
}

func (i inventoryHistoryDo) WithContext(ctx context.Context) *inventoryHistoryDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i inventoryHistoryDo) Clauses(conds ...clause.Expression) *inventoryHistoryDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i inventoryHistoryDo) Returning(value interface{}, columns ...string) *inventoryHistoryDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i inventoryHistoryDo) Not(conds ...gen.Condition) *inventoryHistoryDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i inventoryHistoryDo) Or(conds ...gen.Condition) *inventoryHistoryDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i inventoryHistoryDo) Select(conds ...field.Expr) *inventoryHistoryDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i inventoryHistoryDo) Where(conds ...gen.Condition) *inventoryHistoryDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i inventoryHistoryDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *inventoryHistoryDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i inventoryHistoryDo) Order(conds ...field.Expr) *inventoryHistoryDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i inventoryHistoryDo) Distinct(cols ...field.Expr) *inventoryHistoryDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i inventoryHistoryDo) Omit(cols ...field.Expr) *inventoryHistoryDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i inventoryHistoryDo) Join(table schema.Tabler, on ...field.Expr) *inventoryHistoryDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i inventoryHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) *inventoryHistoryDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i inventoryHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) *inventoryHistoryDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i inventoryHistoryDo) Group(cols ...field.Expr) *inventoryHistoryDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i inventoryHistoryDo) Having(conds ...gen.Condition) *inventoryHistoryDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i inventoryHistoryDo) Limit(limit int) *inventoryHistoryDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i inventoryHistoryDo) Offset(offset int) *inventoryHistoryDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i inventoryHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *inventoryHistoryDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i inventoryHistoryDo) Unscoped() *inventoryHistoryDo {
	return i.withDO(i.DO.Unscoped())
}

func (i inventoryHistoryDo) Create(values ...*inventoryhistory.InventoryHistory) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i inventoryHistoryDo) CreateInBatches(values []*inventoryhistory.InventoryHistory, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i inventoryHistoryDo) Save(values ...*inventoryhistory.InventoryHistory) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i inventoryHistoryDo) First() (*inventoryhistory.InventoryHistory, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*inventoryhistory.InventoryHistory), nil
	}
}

func (i inventoryHistoryDo) Take() (*inventoryhistory.InventoryHistory, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*inventoryhistory.InventoryHistory), nil
	}
}

func (i inventoryHistoryDo) Last() (*inventoryhistory.InventoryHistory, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*inventoryhistory.InventoryHistory), nil
	}
}

func (i inventoryHistoryDo) Find() ([]*inventoryhistory.InventoryHistory, error) {
	result, err := i.DO.Find()
	return result.([]*inventoryhistory.InventoryHistory), err
}

func (i inventoryHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*inventoryhistory.InventoryHistory, err error) {
	buf := make([]*inventoryhistory.InventoryHistory, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i inventoryHistoryDo) FindInBatches(result *[]*inventoryhistory.InventoryHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i inventoryHistoryDo) Attrs(attrs ...field.AssignExpr) *inventoryHistoryDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i inventoryHistoryDo) Assign(attrs ...field.AssignExpr) *inventoryHistoryDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i inventoryHistoryDo) Joins(fields ...field.RelationField) *inventoryHistoryDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i inventoryHistoryDo) Preload(fields ...field.RelationField) *inventoryHistoryDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i inventoryHistoryDo) FirstOrInit() (*inventoryhistory.InventoryHistory, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*inventoryhistory.InventoryHistory), nil
	}
}

func (i inventoryHistoryDo) FirstOrCreate() (*inventoryhistory.InventoryHistory, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*inventoryhistory.InventoryHistory), nil
	}
}

func (i inventoryHistoryDo) FindByPage(offset int, limit int) (result []*inventoryhistory.InventoryHistory, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i inventoryHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i *inventoryHistoryDo) withDO(do gen.Dao) *inventoryHistoryDo {
	i.DO = *do.(*gen.DO)
	return i
}
