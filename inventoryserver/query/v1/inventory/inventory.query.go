// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package inventory

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	v1 "github.com/hinss/api/inventoryserver/model/v1/inventory"
)

func newInventory(db *gorm.DB) inventory {
	_inventory := inventory{}

	_inventory.inventoryDo.UseDB(db)
	_inventory.inventoryDo.UseModel(&v1.Inventory{})

	tableName := _inventory.inventoryDo.TableName()
	_inventory.ALL = field.NewField(tableName, "*")
	_inventory.ID = field.NewInt32(tableName, "id")
	_inventory.AddTime = field.NewTime(tableName, "add_time")
	_inventory.IsDeleted = field.NewBool(tableName, "is_deleted")
	_inventory.UpdateTime = field.NewTime(tableName, "update_time")
	_inventory.Goods = field.NewInt32(tableName, "goods")
	_inventory.Stocks = field.NewInt32(tableName, "stocks")
	_inventory.Version = field.NewInt32(tableName, "version")

	_inventory.fillFieldMap()

	return _inventory
}

type inventory struct {
	inventoryDo inventoryDo

	ALL        field.Field
	ID         field.Int32
	AddTime    field.Time
	IsDeleted  field.Bool
	UpdateTime field.Time
	Goods      field.Int32
	Stocks     field.Int32
	Version    field.Int32

	fieldMap map[string]field.Expr
}

func (i inventory) Table(newTableName string) *inventory {
	i.inventoryDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i inventory) As(alias string) *inventory {
	i.inventoryDo.DO = *(i.inventoryDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *inventory) updateTableName(table string) *inventory {
	i.ALL = field.NewField(table, "*")
	i.ID = field.NewInt32(table, "id")
	i.AddTime = field.NewTime(table, "add_time")
	i.IsDeleted = field.NewBool(table, "is_deleted")
	i.UpdateTime = field.NewTime(table, "update_time")
	i.Goods = field.NewInt32(table, "goods")
	i.Stocks = field.NewInt32(table, "stocks")
	i.Version = field.NewInt32(table, "version")

	i.fillFieldMap()

	return i
}

func (i *inventory) WithContext(ctx context.Context) *inventoryDo {
	return i.inventoryDo.WithContext(ctx)
}

func (i inventory) TableName() string { return i.inventoryDo.TableName() }

func (i inventory) Alias() string { return i.inventoryDo.Alias() }

func (i *inventory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *inventory) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 7)
	i.fieldMap["id"] = i.ID
	i.fieldMap["add_time"] = i.AddTime
	i.fieldMap["is_deleted"] = i.IsDeleted
	i.fieldMap["update_time"] = i.UpdateTime
	i.fieldMap["goods"] = i.Goods
	i.fieldMap["stocks"] = i.Stocks
	i.fieldMap["version"] = i.Version
}

func (i inventory) clone(db *gorm.DB) inventory {
	i.inventoryDo.ReplaceDB(db)
	return i
}

type inventoryDo struct{ gen.DO }

func (i inventoryDo) Debug() *inventoryDo {
	return i.withDO(i.DO.Debug())
}

func (i inventoryDo) WithContext(ctx context.Context) *inventoryDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i inventoryDo) Clauses(conds ...clause.Expression) *inventoryDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i inventoryDo) Returning(value interface{}, columns ...string) *inventoryDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i inventoryDo) Not(conds ...gen.Condition) *inventoryDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i inventoryDo) Or(conds ...gen.Condition) *inventoryDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i inventoryDo) Select(conds ...field.Expr) *inventoryDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i inventoryDo) Where(conds ...gen.Condition) *inventoryDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i inventoryDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *inventoryDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i inventoryDo) Order(conds ...field.Expr) *inventoryDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i inventoryDo) Distinct(cols ...field.Expr) *inventoryDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i inventoryDo) Omit(cols ...field.Expr) *inventoryDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i inventoryDo) Join(table schema.Tabler, on ...field.Expr) *inventoryDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i inventoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) *inventoryDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i inventoryDo) RightJoin(table schema.Tabler, on ...field.Expr) *inventoryDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i inventoryDo) Group(cols ...field.Expr) *inventoryDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i inventoryDo) Having(conds ...gen.Condition) *inventoryDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i inventoryDo) Limit(limit int) *inventoryDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i inventoryDo) Offset(offset int) *inventoryDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i inventoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *inventoryDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i inventoryDo) Unscoped() *inventoryDo {
	return i.withDO(i.DO.Unscoped())
}

func (i inventoryDo) Create(values ...*v1.Inventory) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i inventoryDo) CreateInBatches(values []*v1.Inventory, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i inventoryDo) Save(values ...*v1.Inventory) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i inventoryDo) First() (*v1.Inventory, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*v1.Inventory), nil
	}
}

func (i inventoryDo) Take() (*v1.Inventory, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*v1.Inventory), nil
	}
}

func (i inventoryDo) Last() (*v1.Inventory, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*v1.Inventory), nil
	}
}

func (i inventoryDo) Find() ([]*v1.Inventory, error) {
	result, err := i.DO.Find()
	return result.([]*v1.Inventory), err
}

func (i inventoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*v1.Inventory, err error) {
	buf := make([]*v1.Inventory, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i inventoryDo) FindInBatches(result *[]*v1.Inventory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i inventoryDo) Attrs(attrs ...field.AssignExpr) *inventoryDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i inventoryDo) Assign(attrs ...field.AssignExpr) *inventoryDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i inventoryDo) Joins(fields ...field.RelationField) *inventoryDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i inventoryDo) Preload(fields ...field.RelationField) *inventoryDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i inventoryDo) FirstOrInit() (*v1.Inventory, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*v1.Inventory), nil
	}
}

func (i inventoryDo) FirstOrCreate() (*v1.Inventory, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*v1.Inventory), nil
	}
}

func (i inventoryDo) FindByPage(offset int, limit int) (result []*v1.Inventory, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i inventoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i *inventoryDo) withDO(do gen.Dao) *inventoryDo {
	i.DO = *do.(*gen.DO)
	return i
}
