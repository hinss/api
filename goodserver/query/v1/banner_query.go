// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package v1

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	v1 "github.com/hinss/api/goodserver/model/v1"
	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newBanner(db *gorm.DB) banner {
	_banner := banner{}

	_banner.bannerDo.UseDB(db)
	_banner.bannerDo.UseModel(&v1.Banner{})

	tableName := _banner.bannerDo.TableName()
	_banner.ALL = field.NewField(tableName, "*")
	_banner.ID = field.NewInt32(tableName, "id")
	_banner.AddTime = field.NewTime(tableName, "add_time")
	_banner.IsDeleted = field.NewBool(tableName, "is_deleted")
	_banner.UpdateTime = field.NewTime(tableName, "update_time")
	_banner.Image = field.NewString(tableName, "image")
	_banner.URL = field.NewString(tableName, "url")
	_banner.Index = field.NewInt32(tableName, "index")

	_banner.fillFieldMap()

	return _banner
}

type banner struct {
	bannerDo bannerDo

	ALL        field.Field
	ID         field.Int32
	AddTime    field.Time
	IsDeleted  field.Bool
	UpdateTime field.Time
	Image      field.String
	URL        field.String
	Index      field.Int32

	fieldMap map[string]field.Expr
}

func (b banner) Table(newTableName string) *banner {
	b.bannerDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b banner) As(alias string) *banner {
	b.bannerDo.DO = *(b.bannerDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *banner) updateTableName(table string) *banner {
	b.ALL = field.NewField(table, "*")
	b.ID = field.NewInt32(table, "id")
	b.AddTime = field.NewTime(table, "add_time")
	b.IsDeleted = field.NewBool(table, "is_deleted")
	b.UpdateTime = field.NewTime(table, "update_time")
	b.Image = field.NewString(table, "image")
	b.URL = field.NewString(table, "url")
	b.Index = field.NewInt32(table, "index")

	b.fillFieldMap()

	return b
}

func (b *banner) WithContext(ctx context.Context) *bannerDo { return b.bannerDo.WithContext(ctx) }

func (b banner) TableName() string { return b.bannerDo.TableName() }

func (b banner) Alias() string { return b.bannerDo.Alias() }

func (b *banner) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *banner) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 7)
	b.fieldMap["id"] = b.ID
	b.fieldMap["add_time"] = b.AddTime
	b.fieldMap["is_deleted"] = b.IsDeleted
	b.fieldMap["update_time"] = b.UpdateTime
	b.fieldMap["image"] = b.Image
	b.fieldMap["url"] = b.URL
	b.fieldMap["index"] = b.Index
}

func (b banner) clone(db *gorm.DB) banner {
	b.bannerDo.ReplaceDB(db)
	return b
}

type bannerDo struct{ gen.DO }

func (b bannerDo) Debug() *bannerDo {
	return b.withDO(b.DO.Debug())
}

func (b bannerDo) WithContext(ctx context.Context) *bannerDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bannerDo) Clauses(conds ...clause.Expression) *bannerDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bannerDo) Returning(value interface{}, columns ...string) *bannerDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bannerDo) Not(conds ...gen.Condition) *bannerDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bannerDo) Or(conds ...gen.Condition) *bannerDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bannerDo) Select(conds ...field.Expr) *bannerDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bannerDo) Where(conds ...gen.Condition) *bannerDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bannerDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *bannerDo {
	return b.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (b bannerDo) Order(conds ...field.Expr) *bannerDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bannerDo) Distinct(cols ...field.Expr) *bannerDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bannerDo) Omit(cols ...field.Expr) *bannerDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bannerDo) Join(table schema.Tabler, on ...field.Expr) *bannerDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bannerDo) LeftJoin(table schema.Tabler, on ...field.Expr) *bannerDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bannerDo) RightJoin(table schema.Tabler, on ...field.Expr) *bannerDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bannerDo) Group(cols ...field.Expr) *bannerDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bannerDo) Having(conds ...gen.Condition) *bannerDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bannerDo) Limit(limit int) *bannerDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bannerDo) Offset(offset int) *bannerDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bannerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *bannerDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bannerDo) Unscoped() *bannerDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bannerDo) Create(values ...*v1.Banner) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bannerDo) CreateInBatches(values []*v1.Banner, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bannerDo) Save(values ...*v1.Banner) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bannerDo) First() (*v1.Banner, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*v1.Banner), nil
	}
}

func (b bannerDo) Take() (*v1.Banner, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*v1.Banner), nil
	}
}

func (b bannerDo) Last() (*v1.Banner, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*v1.Banner), nil
	}
}

func (b bannerDo) Find() ([]*v1.Banner, error) {
	result, err := b.DO.Find()
	return result.([]*v1.Banner), err
}

func (b bannerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*v1.Banner, err error) {
	buf := make([]*v1.Banner, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bannerDo) FindInBatches(result *[]*v1.Banner, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bannerDo) Attrs(attrs ...field.AssignExpr) *bannerDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bannerDo) Assign(attrs ...field.AssignExpr) *bannerDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bannerDo) Joins(fields ...field.RelationField) *bannerDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bannerDo) Preload(fields ...field.RelationField) *bannerDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bannerDo) FirstOrInit() (*v1.Banner, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*v1.Banner), nil
	}
}

func (b bannerDo) FirstOrCreate() (*v1.Banner, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*v1.Banner), nil
	}
}

func (b bannerDo) FindByPage(offset int, limit int) (result []*v1.Banner, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bannerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b *bannerDo) withDO(do gen.Dao) *bannerDo {
	b.DO = *do.(*gen.DO)
	return b
}
