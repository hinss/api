// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package goodscategorybanner

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	v1 "github.com/hinss/api/goodserver/model/v1"
	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newGoodsCategoryBanner(db *gorm.DB) goodsCategoryBanner {
	_goodsCategoryBanner := goodsCategoryBanner{}

	_goodsCategoryBanner.goodsCategoryBannerDo.UseDB(db)
	_goodsCategoryBanner.goodsCategoryBannerDo.UseModel(&v1.GoodsCategoryBanner{})

	tableName := _goodsCategoryBanner.goodsCategoryBannerDo.TableName()
	_goodsCategoryBanner.ALL = field.NewField(tableName, "*")
	_goodsCategoryBanner.ID = field.NewInt32(tableName, "id")
	_goodsCategoryBanner.CategoryID = field.NewInt32(tableName, "category_id")
	_goodsCategoryBanner.BrandID = field.NewInt32(tableName, "brand_id")
	_goodsCategoryBanner.AddTime = field.NewTime(tableName, "add_time")
	_goodsCategoryBanner.IsDeleted = field.NewBool(tableName, "is_deleted")
	_goodsCategoryBanner.UpdateTime = field.NewTime(tableName, "update_time")

	_goodsCategoryBanner.fillFieldMap()

	return _goodsCategoryBanner
}

type goodsCategoryBanner struct {
	goodsCategoryBannerDo goodsCategoryBannerDo

	ALL        field.Field
	ID         field.Int32
	CategoryID field.Int32
	BrandID    field.Int32
	AddTime    field.Time
	IsDeleted  field.Bool
	UpdateTime field.Time

	fieldMap map[string]field.Expr
}

func (g goodsCategoryBanner) Table(newTableName string) *goodsCategoryBanner {
	g.goodsCategoryBannerDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g goodsCategoryBanner) As(alias string) *goodsCategoryBanner {
	g.goodsCategoryBannerDo.DO = *(g.goodsCategoryBannerDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *goodsCategoryBanner) updateTableName(table string) *goodsCategoryBanner {
	g.ALL = field.NewField(table, "*")
	g.ID = field.NewInt32(table, "id")
	g.CategoryID = field.NewInt32(table, "category_id")
	g.BrandID = field.NewInt32(table, "brand_id")
	g.AddTime = field.NewTime(table, "add_time")
	g.IsDeleted = field.NewBool(table, "is_deleted")
	g.UpdateTime = field.NewTime(table, "update_time")

	g.fillFieldMap()

	return g
}

func (g *goodsCategoryBanner) WithContext(ctx context.Context) *goodsCategoryBannerDo {
	return g.goodsCategoryBannerDo.WithContext(ctx)
}

func (g goodsCategoryBanner) TableName() string { return g.goodsCategoryBannerDo.TableName() }

func (g goodsCategoryBanner) Alias() string { return g.goodsCategoryBannerDo.Alias() }

func (g *goodsCategoryBanner) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *goodsCategoryBanner) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 6)
	g.fieldMap["id"] = g.ID
	g.fieldMap["category_id"] = g.CategoryID
	g.fieldMap["brand_id"] = g.BrandID
	g.fieldMap["add_time"] = g.AddTime
	g.fieldMap["is_deleted"] = g.IsDeleted
	g.fieldMap["update_time"] = g.UpdateTime
}

func (g goodsCategoryBanner) clone(db *gorm.DB) goodsCategoryBanner {
	g.goodsCategoryBannerDo.ReplaceDB(db)
	return g
}

type goodsCategoryBannerDo struct{ gen.DO }

func (g goodsCategoryBannerDo) Debug() *goodsCategoryBannerDo {
	return g.withDO(g.DO.Debug())
}

func (g goodsCategoryBannerDo) WithContext(ctx context.Context) *goodsCategoryBannerDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g goodsCategoryBannerDo) Clauses(conds ...clause.Expression) *goodsCategoryBannerDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g goodsCategoryBannerDo) Returning(value interface{}, columns ...string) *goodsCategoryBannerDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g goodsCategoryBannerDo) Not(conds ...gen.Condition) *goodsCategoryBannerDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g goodsCategoryBannerDo) Or(conds ...gen.Condition) *goodsCategoryBannerDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g goodsCategoryBannerDo) Select(conds ...field.Expr) *goodsCategoryBannerDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g goodsCategoryBannerDo) Where(conds ...gen.Condition) *goodsCategoryBannerDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g goodsCategoryBannerDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *goodsCategoryBannerDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g goodsCategoryBannerDo) Order(conds ...field.Expr) *goodsCategoryBannerDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g goodsCategoryBannerDo) Distinct(cols ...field.Expr) *goodsCategoryBannerDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g goodsCategoryBannerDo) Omit(cols ...field.Expr) *goodsCategoryBannerDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g goodsCategoryBannerDo) Join(table schema.Tabler, on ...field.Expr) *goodsCategoryBannerDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g goodsCategoryBannerDo) LeftJoin(table schema.Tabler, on ...field.Expr) *goodsCategoryBannerDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g goodsCategoryBannerDo) RightJoin(table schema.Tabler, on ...field.Expr) *goodsCategoryBannerDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g goodsCategoryBannerDo) Group(cols ...field.Expr) *goodsCategoryBannerDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g goodsCategoryBannerDo) Having(conds ...gen.Condition) *goodsCategoryBannerDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g goodsCategoryBannerDo) Limit(limit int) *goodsCategoryBannerDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g goodsCategoryBannerDo) Offset(offset int) *goodsCategoryBannerDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g goodsCategoryBannerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *goodsCategoryBannerDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g goodsCategoryBannerDo) Unscoped() *goodsCategoryBannerDo {
	return g.withDO(g.DO.Unscoped())
}

func (g goodsCategoryBannerDo) Create(values ...*v1.GoodsCategoryBanner) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g goodsCategoryBannerDo) CreateInBatches(values []*v1.GoodsCategoryBanner, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g goodsCategoryBannerDo) Save(values ...*v1.GoodsCategoryBanner) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g goodsCategoryBannerDo) First() (*v1.GoodsCategoryBanner, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*v1.GoodsCategoryBanner), nil
	}
}

func (g goodsCategoryBannerDo) Take() (*v1.GoodsCategoryBanner, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*v1.GoodsCategoryBanner), nil
	}
}

func (g goodsCategoryBannerDo) Last() (*v1.GoodsCategoryBanner, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*v1.GoodsCategoryBanner), nil
	}
}

func (g goodsCategoryBannerDo) Find() ([]*v1.GoodsCategoryBanner, error) {
	result, err := g.DO.Find()
	return result.([]*v1.GoodsCategoryBanner), err
}

func (g goodsCategoryBannerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*v1.GoodsCategoryBanner, err error) {
	buf := make([]*v1.GoodsCategoryBanner, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g goodsCategoryBannerDo) FindInBatches(result *[]*v1.GoodsCategoryBanner, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g goodsCategoryBannerDo) Attrs(attrs ...field.AssignExpr) *goodsCategoryBannerDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g goodsCategoryBannerDo) Assign(attrs ...field.AssignExpr) *goodsCategoryBannerDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g goodsCategoryBannerDo) Joins(fields ...field.RelationField) *goodsCategoryBannerDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g goodsCategoryBannerDo) Preload(fields ...field.RelationField) *goodsCategoryBannerDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g goodsCategoryBannerDo) FirstOrInit() (*v1.GoodsCategoryBanner, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*v1.GoodsCategoryBanner), nil
	}
}

func (g goodsCategoryBannerDo) FirstOrCreate() (*v1.GoodsCategoryBanner, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*v1.GoodsCategoryBanner), nil
	}
}

func (g goodsCategoryBannerDo) FindByPage(offset int, limit int) (result []*v1.GoodsCategoryBanner, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g goodsCategoryBannerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g *goodsCategoryBannerDo) withDO(do gen.Dao) *goodsCategoryBannerDo {
	g.DO = *do.(*gen.DO)
	return g
}
