// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package brands

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	v1 "github.com/hinss/api/goodserver/model/v1"
	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newBrands(db *gorm.DB) brands {
	_brands := brands{}

	_brands.brandsDo.UseDB(db)
	_brands.brandsDo.UseModel(&v1.Brands{})

	tableName := _brands.brandsDo.TableName()
	_brands.ALL = field.NewField(tableName, "*")
	_brands.ID = field.NewInt32(tableName, "id")
	_brands.Name = field.NewString(tableName, "name")
	_brands.Logo = field.NewString(tableName, "logo")
	_brands.AddTime = field.NewTime(tableName, "add_time")
	_brands.IsDeleted = field.NewBool(tableName, "is_deleted")
	_brands.UpdateTime = field.NewTime(tableName, "update_time")

	_brands.fillFieldMap()

	return _brands
}

type brands struct {
	brandsDo brandsDo

	ALL        field.Field
	ID         field.Int32
	Name       field.String
	Logo       field.String
	AddTime    field.Time
	IsDeleted  field.Bool
	UpdateTime field.Time

	fieldMap map[string]field.Expr
}

func (b brands) Table(newTableName string) *brands {
	b.brandsDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b brands) As(alias string) *brands {
	b.brandsDo.DO = *(b.brandsDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *brands) updateTableName(table string) *brands {
	b.ALL = field.NewField(table, "*")
	b.ID = field.NewInt32(table, "id")
	b.Name = field.NewString(table, "name")
	b.Logo = field.NewString(table, "logo")
	b.AddTime = field.NewTime(table, "add_time")
	b.IsDeleted = field.NewBool(table, "is_deleted")
	b.UpdateTime = field.NewTime(table, "update_time")

	b.fillFieldMap()

	return b
}

func (b *brands) WithContext(ctx context.Context) *brandsDo { return b.brandsDo.WithContext(ctx) }

func (b brands) TableName() string { return b.brandsDo.TableName() }

func (b brands) Alias() string { return b.brandsDo.Alias() }

func (b *brands) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *brands) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 6)
	b.fieldMap["id"] = b.ID
	b.fieldMap["name"] = b.Name
	b.fieldMap["logo"] = b.Logo
	b.fieldMap["add_time"] = b.AddTime
	b.fieldMap["is_deleted"] = b.IsDeleted
	b.fieldMap["update_time"] = b.UpdateTime
}

func (b brands) clone(db *gorm.DB) brands {
	b.brandsDo.ReplaceDB(db)
	return b
}

type brandsDo struct{ gen.DO }

func (b brandsDo) Debug() *brandsDo {
	return b.withDO(b.DO.Debug())
}

func (b brandsDo) WithContext(ctx context.Context) *brandsDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b brandsDo) Clauses(conds ...clause.Expression) *brandsDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b brandsDo) Returning(value interface{}, columns ...string) *brandsDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b brandsDo) Not(conds ...gen.Condition) *brandsDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b brandsDo) Or(conds ...gen.Condition) *brandsDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b brandsDo) Select(conds ...field.Expr) *brandsDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b brandsDo) Where(conds ...gen.Condition) *brandsDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b brandsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *brandsDo {
	return b.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (b brandsDo) Order(conds ...field.Expr) *brandsDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b brandsDo) Distinct(cols ...field.Expr) *brandsDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b brandsDo) Omit(cols ...field.Expr) *brandsDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b brandsDo) Join(table schema.Tabler, on ...field.Expr) *brandsDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b brandsDo) LeftJoin(table schema.Tabler, on ...field.Expr) *brandsDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b brandsDo) RightJoin(table schema.Tabler, on ...field.Expr) *brandsDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b brandsDo) Group(cols ...field.Expr) *brandsDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b brandsDo) Having(conds ...gen.Condition) *brandsDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b brandsDo) Limit(limit int) *brandsDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b brandsDo) Offset(offset int) *brandsDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b brandsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *brandsDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b brandsDo) Unscoped() *brandsDo {
	return b.withDO(b.DO.Unscoped())
}

func (b brandsDo) Create(values ...*v1.Brands) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b brandsDo) CreateInBatches(values []*v1.Brands, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b brandsDo) Save(values ...*v1.Brands) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b brandsDo) First() (*v1.Brands, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*v1.Brands), nil
	}
}

func (b brandsDo) Take() (*v1.Brands, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*v1.Brands), nil
	}
}

func (b brandsDo) Last() (*v1.Brands, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*v1.Brands), nil
	}
}

func (b brandsDo) Find() ([]*v1.Brands, error) {
	result, err := b.DO.Find()
	return result.([]*v1.Brands), err
}

func (b brandsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*v1.Brands, err error) {
	buf := make([]*v1.Brands, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b brandsDo) FindInBatches(result *[]*v1.Brands, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b brandsDo) Attrs(attrs ...field.AssignExpr) *brandsDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b brandsDo) Assign(attrs ...field.AssignExpr) *brandsDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b brandsDo) Joins(fields ...field.RelationField) *brandsDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b brandsDo) Preload(fields ...field.RelationField) *brandsDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b brandsDo) FirstOrInit() (*v1.Brands, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*v1.Brands), nil
	}
}

func (b brandsDo) FirstOrCreate() (*v1.Brands, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*v1.Brands), nil
	}
}

func (b brandsDo) FindByPage(offset int, limit int) (result []*v1.Brands, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b brandsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b *brandsDo) withDO(do gen.Dao) *brandsDo {
	b.DO = *do.(*gen.DO)
	return b
}
