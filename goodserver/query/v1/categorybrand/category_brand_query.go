// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package categorybrand

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	v1 "github.com/hinss/api/goodserver/model/v1"
	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newCategoryBrand(db *gorm.DB) categoryBrand {
	_categoryBrand := categoryBrand{}

	_categoryBrand.categoryBrandDo.UseDB(db)
	_categoryBrand.categoryBrandDo.UseModel(&v1.CategoryBrand{})

	tableName := _categoryBrand.categoryBrandDo.TableName()
	_categoryBrand.ALL = field.NewField(tableName, "*")
	_categoryBrand.ID = field.NewInt32(tableName, "id")
	_categoryBrand.CategoryID = field.NewInt32(tableName, "category_id")
	_categoryBrand.BrandID = field.NewInt32(tableName, "brand_id")
	_categoryBrand.AddTime = field.NewTime(tableName, "add_time")
	_categoryBrand.IsDeleted = field.NewBool(tableName, "is_deleted")
	_categoryBrand.UpdateTime = field.NewTime(tableName, "update_time")

	_categoryBrand.fillFieldMap()

	return _categoryBrand
}

type categoryBrand struct {
	categoryBrandDo categoryBrandDo

	ALL        field.Field
	ID         field.Int32
	CategoryID field.Int32
	BrandID    field.Int32
	AddTime    field.Time
	IsDeleted  field.Bool
	UpdateTime field.Time

	fieldMap map[string]field.Expr
}

func (c categoryBrand) Table(newTableName string) *categoryBrand {
	c.categoryBrandDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c categoryBrand) As(alias string) *categoryBrand {
	c.categoryBrandDo.DO = *(c.categoryBrandDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *categoryBrand) updateTableName(table string) *categoryBrand {
	c.ALL = field.NewField(table, "*")
	c.ID = field.NewInt32(table, "id")
	c.CategoryID = field.NewInt32(table, "category_id")
	c.BrandID = field.NewInt32(table, "brand_id")
	c.AddTime = field.NewTime(table, "add_time")
	c.IsDeleted = field.NewBool(table, "is_deleted")
	c.UpdateTime = field.NewTime(table, "update_time")

	c.fillFieldMap()

	return c
}

func (c *categoryBrand) WithContext(ctx context.Context) *categoryBrandDo {
	return c.categoryBrandDo.WithContext(ctx)
}

func (c categoryBrand) TableName() string { return c.categoryBrandDo.TableName() }

func (c categoryBrand) Alias() string { return c.categoryBrandDo.Alias() }

func (c *categoryBrand) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *categoryBrand) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["id"] = c.ID
	c.fieldMap["category_id"] = c.CategoryID
	c.fieldMap["brand_id"] = c.BrandID
	c.fieldMap["add_time"] = c.AddTime
	c.fieldMap["is_deleted"] = c.IsDeleted
	c.fieldMap["update_time"] = c.UpdateTime
}

func (c categoryBrand) clone(db *gorm.DB) categoryBrand {
	c.categoryBrandDo.ReplaceDB(db)
	return c
}

type categoryBrandDo struct{ gen.DO }

func (c categoryBrandDo) Debug() *categoryBrandDo {
	return c.withDO(c.DO.Debug())
}

func (c categoryBrandDo) WithContext(ctx context.Context) *categoryBrandDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c categoryBrandDo) Clauses(conds ...clause.Expression) *categoryBrandDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c categoryBrandDo) Returning(value interface{}, columns ...string) *categoryBrandDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c categoryBrandDo) Not(conds ...gen.Condition) *categoryBrandDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c categoryBrandDo) Or(conds ...gen.Condition) *categoryBrandDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c categoryBrandDo) Select(conds ...field.Expr) *categoryBrandDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c categoryBrandDo) Where(conds ...gen.Condition) *categoryBrandDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c categoryBrandDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *categoryBrandDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c categoryBrandDo) Order(conds ...field.Expr) *categoryBrandDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c categoryBrandDo) Distinct(cols ...field.Expr) *categoryBrandDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c categoryBrandDo) Omit(cols ...field.Expr) *categoryBrandDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c categoryBrandDo) Join(table schema.Tabler, on ...field.Expr) *categoryBrandDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c categoryBrandDo) LeftJoin(table schema.Tabler, on ...field.Expr) *categoryBrandDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c categoryBrandDo) RightJoin(table schema.Tabler, on ...field.Expr) *categoryBrandDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c categoryBrandDo) Group(cols ...field.Expr) *categoryBrandDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c categoryBrandDo) Having(conds ...gen.Condition) *categoryBrandDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c categoryBrandDo) Limit(limit int) *categoryBrandDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c categoryBrandDo) Offset(offset int) *categoryBrandDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c categoryBrandDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *categoryBrandDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c categoryBrandDo) Unscoped() *categoryBrandDo {
	return c.withDO(c.DO.Unscoped())
}

func (c categoryBrandDo) Create(values ...*v1.CategoryBrand) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c categoryBrandDo) CreateInBatches(values []*v1.CategoryBrand, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c categoryBrandDo) Save(values ...*v1.CategoryBrand) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c categoryBrandDo) First() (*v1.CategoryBrand, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*v1.CategoryBrand), nil
	}
}

func (c categoryBrandDo) Take() (*v1.CategoryBrand, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*v1.CategoryBrand), nil
	}
}

func (c categoryBrandDo) Last() (*v1.CategoryBrand, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*v1.CategoryBrand), nil
	}
}

func (c categoryBrandDo) Find() ([]*v1.CategoryBrand, error) {
	result, err := c.DO.Find()
	return result.([]*v1.CategoryBrand), err
}

func (c categoryBrandDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*v1.CategoryBrand, err error) {
	buf := make([]*v1.CategoryBrand, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c categoryBrandDo) FindInBatches(result *[]*v1.CategoryBrand, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c categoryBrandDo) Attrs(attrs ...field.AssignExpr) *categoryBrandDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c categoryBrandDo) Assign(attrs ...field.AssignExpr) *categoryBrandDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c categoryBrandDo) Joins(fields ...field.RelationField) *categoryBrandDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c categoryBrandDo) Preload(fields ...field.RelationField) *categoryBrandDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c categoryBrandDo) FirstOrInit() (*v1.CategoryBrand, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*v1.CategoryBrand), nil
	}
}

func (c categoryBrandDo) FirstOrCreate() (*v1.CategoryBrand, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*v1.CategoryBrand), nil
	}
}

func (c categoryBrandDo) FindByPage(offset int, limit int) (result []*v1.CategoryBrand, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c categoryBrandDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c *categoryBrandDo) withDO(do gen.Dao) *categoryBrandDo {
	c.DO = *do.(*gen.DO)
	return c
}
