// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package goods

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	v1 "github.com/hinss/api/goodserver/model/v1"
	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newGoods(db *gorm.DB) goods {
	_goods := goods{}

	_goods.goodsDo.UseDB(db)
	_goods.goodsDo.UseModel(&v1.Goods{})

	tableName := _goods.goodsDo.TableName()
	_goods.ALL = field.NewField(tableName, "*")
	_goods.ID = field.NewInt32(tableName, "id")
	_goods.AddTime = field.NewTime(tableName, "add_time")
	_goods.IsDeleted = field.NewBool(tableName, "is_deleted")
	_goods.UpdateTime = field.NewTime(tableName, "update_time")
	_goods.CategoryID = field.NewInt32(tableName, "category_id")
	_goods.BrandID = field.NewInt32(tableName, "brand_id")
	_goods.OnSale = field.NewBool(tableName, "on_sale")
	_goods.GoodsSn = field.NewString(tableName, "goods_sn")
	_goods.Name = field.NewString(tableName, "name")
	_goods.ClickNum = field.NewInt32(tableName, "click_num")
	_goods.SoldNum = field.NewInt32(tableName, "sold_num")
	_goods.FavNum = field.NewInt32(tableName, "fav_num")
	_goods.Stocks = field.NewInt32(tableName, "stocks")
	_goods.MarketPrice = field.NewFloat32(tableName, "market_price")
	_goods.ShopPrice = field.NewFloat32(tableName, "shop_price")
	_goods.GoodsBrief = field.NewString(tableName, "goods_brief")
	_goods.ShipFree = field.NewBool(tableName, "ship_free")
	_goods.Images = field.NewString(tableName, "images")
	_goods.DescImages = field.NewString(tableName, "desc_images")
	_goods.GoodsFrontImage = field.NewString(tableName, "goods_front_image")
	_goods.IsNew = field.NewBool(tableName, "is_new")
	_goods.IsHot = field.NewBool(tableName, "is_hot")

	_goods.fillFieldMap()

	return _goods
}

type goods struct {
	goodsDo goodsDo

	ALL             field.Field
	ID              field.Int32
	AddTime         field.Time
	IsDeleted       field.Bool
	UpdateTime      field.Time
	CategoryID      field.Int32
	BrandID         field.Int32
	OnSale          field.Bool
	GoodsSn         field.String
	Name            field.String
	ClickNum        field.Int32
	SoldNum         field.Int32
	FavNum          field.Int32
	Stocks          field.Int32
	MarketPrice     field.Float32
	ShopPrice       field.Float32
	GoodsBrief      field.String
	ShipFree        field.Bool
	Images          field.String
	DescImages      field.String
	GoodsFrontImage field.String
	IsNew           field.Bool
	IsHot           field.Bool

	fieldMap map[string]field.Expr
}

func (g goods) Table(newTableName string) *goods {
	g.goodsDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g goods) As(alias string) *goods {
	g.goodsDo.DO = *(g.goodsDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *goods) updateTableName(table string) *goods {
	g.ALL = field.NewField(table, "*")
	g.ID = field.NewInt32(table, "id")
	g.AddTime = field.NewTime(table, "add_time")
	g.IsDeleted = field.NewBool(table, "is_deleted")
	g.UpdateTime = field.NewTime(table, "update_time")
	g.CategoryID = field.NewInt32(table, "category_id")
	g.BrandID = field.NewInt32(table, "brand_id")
	g.OnSale = field.NewBool(table, "on_sale")
	g.GoodsSn = field.NewString(table, "goods_sn")
	g.Name = field.NewString(table, "name")
	g.ClickNum = field.NewInt32(table, "click_num")
	g.SoldNum = field.NewInt32(table, "sold_num")
	g.FavNum = field.NewInt32(table, "fav_num")
	g.Stocks = field.NewInt32(table, "stocks")
	g.MarketPrice = field.NewFloat32(table, "market_price")
	g.ShopPrice = field.NewFloat32(table, "shop_price")
	g.GoodsBrief = field.NewString(table, "goods_brief")
	g.ShipFree = field.NewBool(table, "ship_free")
	g.Images = field.NewString(table, "images")
	g.DescImages = field.NewString(table, "desc_images")
	g.GoodsFrontImage = field.NewString(table, "goods_front_image")
	g.IsNew = field.NewBool(table, "is_new")
	g.IsHot = field.NewBool(table, "is_hot")

	g.fillFieldMap()

	return g
}

func (g *goods) WithContext(ctx context.Context) *goodsDo { return g.goodsDo.WithContext(ctx) }

func (g goods) TableName() string { return g.goodsDo.TableName() }

func (g goods) Alias() string { return g.goodsDo.Alias() }

func (g *goods) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *goods) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 22)
	g.fieldMap["id"] = g.ID
	g.fieldMap["add_time"] = g.AddTime
	g.fieldMap["is_deleted"] = g.IsDeleted
	g.fieldMap["update_time"] = g.UpdateTime
	g.fieldMap["category_id"] = g.CategoryID
	g.fieldMap["brand_id"] = g.BrandID
	g.fieldMap["on_sale"] = g.OnSale
	g.fieldMap["goods_sn"] = g.GoodsSn
	g.fieldMap["name"] = g.Name
	g.fieldMap["click_num"] = g.ClickNum
	g.fieldMap["sold_num"] = g.SoldNum
	g.fieldMap["fav_num"] = g.FavNum
	g.fieldMap["stocks"] = g.Stocks
	g.fieldMap["market_price"] = g.MarketPrice
	g.fieldMap["shop_price"] = g.ShopPrice
	g.fieldMap["goods_brief"] = g.GoodsBrief
	g.fieldMap["ship_free"] = g.ShipFree
	g.fieldMap["images"] = g.Images
	g.fieldMap["desc_images"] = g.DescImages
	g.fieldMap["goods_front_image"] = g.GoodsFrontImage
	g.fieldMap["is_new"] = g.IsNew
	g.fieldMap["is_hot"] = g.IsHot
}

func (g goods) clone(db *gorm.DB) goods {
	g.goodsDo.ReplaceDB(db)
	return g
}

type goodsDo struct{ gen.DO }

func (g goodsDo) Debug() *goodsDo {
	return g.withDO(g.DO.Debug())
}

func (g goodsDo) WithContext(ctx context.Context) *goodsDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g goodsDo) Clauses(conds ...clause.Expression) *goodsDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g goodsDo) Returning(value interface{}, columns ...string) *goodsDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g goodsDo) Not(conds ...gen.Condition) *goodsDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g goodsDo) Or(conds ...gen.Condition) *goodsDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g goodsDo) Select(conds ...field.Expr) *goodsDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g goodsDo) Where(conds ...gen.Condition) *goodsDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g goodsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *goodsDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g goodsDo) Order(conds ...field.Expr) *goodsDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g goodsDo) Distinct(cols ...field.Expr) *goodsDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g goodsDo) Omit(cols ...field.Expr) *goodsDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g goodsDo) Join(table schema.Tabler, on ...field.Expr) *goodsDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g goodsDo) LeftJoin(table schema.Tabler, on ...field.Expr) *goodsDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g goodsDo) RightJoin(table schema.Tabler, on ...field.Expr) *goodsDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g goodsDo) Group(cols ...field.Expr) *goodsDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g goodsDo) Having(conds ...gen.Condition) *goodsDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g goodsDo) Limit(limit int) *goodsDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g goodsDo) Offset(offset int) *goodsDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g goodsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *goodsDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g goodsDo) Unscoped() *goodsDo {
	return g.withDO(g.DO.Unscoped())
}

func (g goodsDo) Create(values ...*v1.Goods) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g goodsDo) CreateInBatches(values []*v1.Goods, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g goodsDo) Save(values ...*v1.Goods) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g goodsDo) First() (*v1.Goods, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*v1.Goods), nil
	}
}

func (g goodsDo) Take() (*v1.Goods, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*v1.Goods), nil
	}
}

func (g goodsDo) Last() (*v1.Goods, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*v1.Goods), nil
	}
}

func (g goodsDo) Find() ([]*v1.Goods, error) {
	result, err := g.DO.Find()
	return result.([]*v1.Goods), err
}

func (g goodsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*v1.Goods, err error) {
	buf := make([]*v1.Goods, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g goodsDo) FindInBatches(result *[]*v1.Goods, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g goodsDo) Attrs(attrs ...field.AssignExpr) *goodsDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g goodsDo) Assign(attrs ...field.AssignExpr) *goodsDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g goodsDo) Joins(fields ...field.RelationField) *goodsDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g goodsDo) Preload(fields ...field.RelationField) *goodsDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g goodsDo) FirstOrInit() (*v1.Goods, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*v1.Goods), nil
	}
}

func (g goodsDo) FirstOrCreate() (*v1.Goods, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*v1.Goods), nil
	}
}

func (g goodsDo) FindByPage(offset int, limit int) (result []*v1.Goods, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g goodsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g *goodsDo) withDO(do gen.Dao) *goodsDo {
	g.DO = *do.(*gen.DO)
	return g
}
